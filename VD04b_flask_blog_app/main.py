# ============================================================================
# FLASK ПРИЛОЖЕНИЕ: САЙТ С ГЛАВНОЙ СТРАНИЦЕЙ, БЛОГОМ И КОНТАКТАМИ
# ============================================================================

# ============================================================================
# БЛОК 1: ИМПОРТ НЕОБХОДИМЫХ БИБЛИОТЕК
# ============================================================================

# Импортируем класс Flask - основной класс для создания веб-приложения
# Flask обрабатывает HTTP-запросы и управляет маршрутизацией
from flask import Flask

# Импортируем функцию render_template для отображения HTML-шаблонов
# render_template ищет HTML-файлы в папке templates и отправляет их браузеру
# Также передает переменные из Python в HTML-шаблоны
from flask import render_template

# ============================================================================
# БЛОК 2: СОЗДАНИЕ ЭКЗЕМПЛЯРА FLASK-ПРИЛОЖЕНИЯ
# ============================================================================

# Создаем объект Flask и сохраняем его в переменную app
# __name__ - встроенная переменная Python с именем текущего модуля
# Flask использует __name__ для определения расположения приложения
# Это необходимо для корректного поиска папок templates и static
app = Flask(__name__)


# ============================================================================
# БЛОК 3: МАРШРУТ ГЛАВНОЙ СТРАНИЦЫ (INDEX)
# ============================================================================

# Декоратор @app.route("/") регистрирует функцию для обработки главной страницы
# "/" - это корневой URL-адрес (главная страница сайта)
# Когда пользователь заходит на http://127.0.0.1:5000/, выполняется функция index()
@app.route("/")
def index():
    # Функция index() обрабатывает запросы к главной странице

    # Создаем переменную title с названием страницы
    # Эта переменная будет передана в HTML-шаблон
    title = "Главная страница"

    # Создаем словарь с информацией о сайте
    # Словарь - это структура данных с парами ключ-значение
    site_info = {
        "name": "Мой первый сайт на Flask",  # Название сайта
        "description": "Добро пожаловать на мой сайт!",  # Описание
        "year": 2025  # Год создания
    }

    # render_template() находит файл index.html в папке templates
    # title=title передает переменную title в HTML (будет доступна как {{ title }})
    # site_info=site_info передает словарь в HTML (доступ: {{ site_info.name }})
    return render_template("index.html", title=title, site_info=site_info)


# ============================================================================
# БЛОК 4: МАРШРУТ СТРАНИЦЫ БЛОГА
# ============================================================================

# Декоратор @app.route("/blog/") создает маршрут для страницы блога
# "/blog/" - URL-адрес страницы (http://127.0.0.1:5000/blog/)
# Слэш в конце делает URL гибким (работает и /blog, и /blog/)
@app.route("/blog/")
def blog():
    # Функция blog() обрабатывает запросы к странице блога

    # Переменная с заголовком страницы
    title = "Блог"

    # Создаем список статей блога
    # Список (list) - упорядоченная коллекция элементов в квадратных скобках []
    # Каждый элемент списка - это словарь (dict) с информацией о статье
    posts = [
        {
            "id": 1,  # Уникальный идентификатор статьи
            "title": "Первая статья о Python",  # Заголовок статьи
            "content": "Python - это мощный и универсальный язык программирования. Он отлично подходит для веб-разработки, анализа данных, машинного обучения и многого другого.",
            # Текст статьи
            "date": "10.10.2025",  # Дата публикации
            "author": "Иван Петров"  # Автор статьи
        },
        {
            "id": 2,
            "title": "Знакомство с Flask",
            "content": "Flask - это микро-фреймворк для создания веб-приложений на Python. Он простой в изучении, но очень мощный. С его помощью можно создавать как простые сайты, так и сложные веб-приложения.",
            "date": "11.10.2025",
            "author": "Мария Сидорова"
        },
        {
            "id": 3,
            "title": "Основы веб-разработки",
            "content": "Веб-разработка включает в себя фронтенд (HTML, CSS, JavaScript) и бэкенд (Python, Flask, базы данных). Для создания современного сайта нужно знать обе стороны разработки.",
            "date": "12.10.2025",
            "author": "Алексей Смирнов"
        }
    ]

    # render_template() отображает файл blog.html
    # title=title передает заголовок страницы
    # posts=posts передает список всех статей в HTML
    # В HTML можно будет использовать цикл для отображения всех статей
    return render_template("blog.html", title=title, posts=posts)


# ============================================================================
# БЛОК 5: МАРШРУТ СТРАНИЦЫ КОНТАКТОВ
# ============================================================================

# Декоратор @app.route("/contacts/") создает маршрут для страницы контактов
# "/contacts/" - URL-адрес страницы (http://127.0.0.1:5000/contacts/)
@app.route("/contacts/")
def contacts():
    # Функция contacts() обрабатывает запросы к странице контактов

    # Переменная с заголовком страницы
    title = "Контакты"

    # Создаем словарь с контактной информацией
    # Словарь позволяет хранить связанные данные в одной структуре
    contact_info = {
        "email": "info@mysite.ru",  # Email для связи
        "phone": "+7 (999) 123-45-67",  # Телефон
        "address": "Москва, ул. Примерная, д. 10",  # Адрес офиса
        "work_hours": "Пн-Пт: 9:00 - 18:00",  # Часы работы
        "social": {  # Вложенный словарь с социальными сетями
            "vk": "https://vk.com/mysite",  # Ссылка на VK
            "telegram": "https://t.me/mysite",  # Ссылка на Telegram
            "youtube": "https://youtube.com/@mysite"  # Ссылка на YouTube
        }
    }

    # Список членов команды
    # Каждый элемент списка - словарь с информацией о сотруднике
    team = [
        {
            "name": "Иван Петров",  # Имя сотрудника
            "position": "Основатель",  # Должность
            "email": "ivan@mysite.ru"  # Email сотрудника
        },
        {
            "name": "Мария Сидорова",
            "position": "Главный разработчик",
            "email": "maria@mysite.ru"
        },
        {
            "name": "Алексей Смирнов",
            "position": "Дизайнер",
            "email": "alexey@mysite.ru"
        }
    ]

    # render_template() отображает файл contacts.html
    # Передаем три переменные: title, contact_info и team
    # В HTML они будут доступны через двойные фигурные скобки {{ }}
    return render_template("contacts.html", title=title, contact_info=contact_info, team=team)


# ============================================================================
# БЛОК 6: ЗАПУСК ВЕБ-ПРИЛОЖЕНИЯ
# ============================================================================

# Проверяем, запущен ли файл напрямую (а не импортирован)
# __name__ == "__main__" истинно только при прямом запуске файла
# Это предотвращает запуск сервера при импорте модуля в другие файлы
if __name__ == "__main__":
    # app.run() запускает встроенный веб-сервер Flask
    # debug=True включает режим отладки:
    #   1. Автоматическая перезагрузка при изменении кода
    #   2. Подробные сообщения об ошибках в браузере
    #   3. Интерактивный отладчик для исправления ошибок
    # ВАЖНО: Используйте debug=True только для разработки!
    # На реальном сервере (production) debug должен быть False
    app.run(debug=True)

    # После запуска сервер будет доступен по адресу:
    # http://127.0.0.1:5000/ - главная страница
    # http://127.0.0.1:5000/blog/ - страница блога
    # http://127.0.0.1:5000/contacts/ - страница контактов
    #
    # 127.0.0.1 - это localhost (ваш компьютер)
    # 5000 - порт по умолчанию для Flask
    #
    # Для остановки сервера нажмите Ctrl+C в терминале

# ============================================================================
# СТРУКТУРА ПРОЕКТА (создайте эту структуру):
# ============================================================================
#
# project_folder/                    # Корневая папка проекта
# │
# ├── main.py                        # Этот файл (основной код приложения)
# │
# ├── templates/                     # Папка с HTML-шаблонами (ОБЯЗАТЕЛЬНА!)
# │   ├── index.html                # Главная страница
# │   ├── blog.html                 # Страница блога
# │   └── contacts.html             # Страница контактов
# │
# └── static/                        # Папка со статическими файлами (ОБЯЗАТЕЛЬНА!)
#     ├── css/                       # Папка с CSS-файлами
#     │   └── style.css             # Файл со стилями для всех страниц
#     │
#     └── image/                     # Папка с изображениями
#         ├── logo.png              # Логотип сайта
#         ├── blog1.jpg             # Изображение для блога
#         └── team.jpg              # Фото команды
#
# ============================================================================


# ============================================================================
# ПОШАГОВАЯ ИНСТРУКЦИЯ ПО СОЗДАНИЮ ПРОЕКТА:
# ============================================================================
#
# ШАГ 1: УСТАНОВКА FLASK
# -----------------------
# 1. Откройте PyCharm
# 2. Внизу слева нажмите "Python Packages"
# 3. Введите "flask" в поле поиска
# 4. Нажмите кнопку "Install package"
# 5. Дождитесь окончания установки
#
#
# ШАГ 2: СОЗДАНИЕ СТРУКТУРЫ ПАПОК
# --------------------------------
# 1. В левой панели PyCharm нажмите ПКМ на корневую папку проекта
# 2. Выберите New → Directory
# 3. Введите "templates" и нажмите Enter
# 4. Повторите для создания папки "static"
# 5. Внутри папки static создайте папки "css" и "image"
#
#
# ШАГ 3: СОЗДАНИЕ HTML-ФАЙЛОВ
# ----------------------------
# 1. Нажмите ПКМ на папку templates
# 2. Выберите New → File
# 3. Введите "index.html" и нажмите Enter
# 4. Повторите для "blog.html" и "contacts.html"
# 5. Скопируйте HTML-код в каждый файл (см. ниже)
#
#
# ШАГ 4: СОЗДАНИЕ CSS-ФАЙЛА (опционально)
# ----------------------------------------
# 1. Нажмите ПКМ на папку static/css
# 2. Выберите New → File
# 3. Введите "style.css" и нажмите Enter
# 4. Добавьте свои стили (см. ниже)
#
#
# ШАГ 5: ЗАПУСК ПРИЛОЖЕНИЯ
# -------------------------
# 1. Откройте файл main.py
# 2. Нажмите ПКМ в любом месте файла
# 3. Выберите "Run 'main'"
# 4. Дождитесь появления сообщения о запуске сервера
# 5. Откройте браузер и перейдите по адресу http://127.0.0.1:5000/
#
# ============================================================================


# ============================================================================
# ВАЖНЫЕ МОМЕНТЫ ПРИ РАБОТЕ С FLASK:
# ============================================================================
#
# 1. НАЗВАНИЯ ПАПОК:
#    - templates - строго обязательное название (Flask ищет именно эту папку)
#    - static - строго обязательное название (для статических файлов)
#
# 2. МАРШРУТЫ (ROUTES):
#    - Всегда начинаются с "/" (слэш)
#    - Рекомендуется заканчивать на "/" для гибкости
#    - Пример: @app.route("/blog/")
#
# 3. ФУНКЦИЯ render_template():
#    - Автоматически ищет файлы в папке templates
#    - Не нужно указывать путь "templates/index.html", только "index.html"
#    - Можно передавать переменные: render_template("file.html", var=value)
#
# 4. ПЕРЕДАЧА ДАННЫХ В HTML:
#    - Используйте именованные параметры: title=title
#    - В HTML доступ через {{ имя_переменной }}
#    - Для словарей: {{ словарь.ключ }}
#    - Для списков используйте циклы Jinja2
#
# 5. ССЫЛКИ В HTML:
#    - Используйте относительные пути: href="/blog/"
#    - Для главной страницы: href="/"
#    - Ссылки должны совпадать с маршрутами в Flask
#
# 6. СТАТИЧЕСКИЕ ФАЙЛЫ:
#    - CSS: <link rel="stylesheet" href="/static/css/style.css">
#    - Изображения: <img src="/static/image/logo.png">
#    - JavaScript: <script src="/static/js/script.js"></script>
#
# 7. РЕЖИМ ОТЛАДКИ (debug=True):
#    - Автоматически перезагружает сервер при изменении кода
#    - Показывает подробные ошибки в браузере
#    - НИКОГДА не используйте на реальном сервере!
#
# ============================================================================


# ============================================================================
# ВОЗМОЖНЫЕ ОШИБКИ И ИХ РЕШЕНИЯ:
# ============================================================================
#
# ОШИБКА 1: "TemplateNotFound"
# Решение: Проверьте, что:
#   - Папка называется именно "templates" (не "template"!)
#   - HTML-файл находится в папке templates
#   - Название файла написано правильно (с расширением .html)
#
# ОШИБКА 2: "Address already in use"
# Решение:
#   - Порт 5000 уже занят другим приложением
#   - Остановите предыдущий запуск Flask (Ctrl+C)
#   - Или измените порт: app.run(port=5001)
#
# ОШИБКА 3: Стили не применяются
# Решение: Проверьте, что:
#   - CSS-файл находится в папке static/css/
#   - Путь в HTML правильный: /static/css/style.css
#   - Очистите кэш браузера (Ctrl+F5)
#
# ОШИБКА 4: Ссылки не работают
# Решение:
#   - Проверьте, что href совпадает с @app.route()
#   - Не забывайте "/" в начале: href="/blog/"
#   - Проверьте регистр букв (чувствительно!)
#
# ============================================================================