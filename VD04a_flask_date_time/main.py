# ============================================================================
# FLASK ПРИЛОЖЕНИЕ: ОТОБРАЖЕНИЕ ТЕКУЩЕЙ ДАТЫ И ВРЕМЕНИ
# ============================================================================

# ============================================================================
# БЛОК 1: ИМПОРТ НЕОБХОДИМЫХ БИБЛИОТЕК
# ============================================================================

# Импортируем класс Flask - основу для создания веб-приложения
# Flask позволяет создавать веб-сервер и обрабатывать HTTP-запросы
from flask import Flask

# Импортируем функцию render_template для работы с HTML-шаблонами
# Эта функция ищет HTML-файлы в папке templates и отправляет их браузеру
from flask import render_template

# Импортируем класс datetime из модуля datetime
# datetime позволяет работать с датой и временем в Python
# Мы будем использовать его для получения текущей даты и времени
from datetime import datetime

# ============================================================================
# БЛОК 2: СОЗДАНИЕ ЭКЗЕМПЛЯРА FLASK-ПРИЛОЖЕНИЯ
# ============================================================================

# Создаем объект приложения Flask и сохраняем его в переменную app
# __name__ - встроенная переменная Python, содержащая имя текущего модуля
# Flask использует __name__ для определения корневого пути приложения
# Это нужно для правильного поиска папок templates и static
app = Flask(__name__)


# ============================================================================
# БЛОК 3: МАРШРУТ ГЛАВНОЙ СТРАНИЦЫ С ДАТОЙ И ВРЕМЕНЕМ
# ============================================================================

# Декоратор @app.route("/") регистрирует функцию для обработки главной страницы
# "/" означает корневой URL-адрес сайта (например, http://127.0.0.1:5000/)
# Когда пользователь заходит на главную страницу, выполняется функция index()
@app.route("/")
def index():
    # Функция index() обрабатывает запросы к главной странице

    # datetime.now() - метод класса datetime, возвращающий текущую дату и время
    # Создаем объект current_datetime, который содержит точное время выполнения этой строки
    current_datetime = datetime.now()

    # Форматируем дату в читаемый вид с помощью метода strftime()
    # strftime() преобразует объект datetime в строку по заданному формату
    # %d - день месяца (01-31)
    # %m - номер месяца (01-12)
    # %Y - год в формате 4 цифры (например, 2025)
    # Результат: "12.10.2025"
    current_date = current_datetime.strftime("%d.%m.%Y")

    # Форматируем время в читаемый вид
    # %H - часы в 24-часовом формате (00-23)
    # %M - минуты (00-59)
    # %S - секунды (00-59)
    # Результат: "14:30:45"
    current_time = current_datetime.strftime("%H:%M:%S")

    # Получаем название дня недели на русском языке
    # weekday() возвращает номер дня недели (0=понедельник, 6=воскресенье)
    # Создаем список с названиями дней недели
    days = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
    # Используем номер дня недели как индекс для получения названия из списка
    day_of_week = days[current_datetime.weekday()]

    # Получаем название месяца на русском языке
    # month - атрибут объекта datetime, содержащий номер месяца (1-12)
    # Создаем список с названиями месяцев (индекс 0 пустой, чтобы индексы совпадали с номерами месяцев)
    months = ["", "Января", "Февраля", "Марта", "Апреля", "Мая", "Июня",
              "Июля", "Августа", "Сентября", "Октября", "Ноября", "Декабря"]
    # Получаем название месяца по его номеру
    month_name = months[current_datetime.month]

    # Формируем полную дату в красивом формате на русском языке
    # Используем f-строку для подстановки значений переменных
    # day - день месяца, month_name - название месяца, year - год
    full_date = f"{current_datetime.day} {month_name} {current_datetime.year} года"

    # render_template() находит файл datetime.html в папке templates
    # Передаем в шаблон переменные с датой и временем в виде именованных параметров
    # date=current_date означает: в HTML будет доступна переменная {{ date }}
    # time=current_time означает: в HTML будет доступна переменная {{ time }}
    # day=day_of_week означает: в HTML будет доступна переменная {{ day }}
    # full_date=full_date означает: в HTML будет доступна переменная {{ full_date }}
    return render_template("datetime.html",
                           date=current_date,
                           time=current_time,
                           day=day_of_week,
                           full_date=full_date)


# ============================================================================
# БЛОК 4: ДОПОЛНИТЕЛЬНЫЙ МАРШРУТ - СТРАНИЦА "О ПРИЛОЖЕНИИ"
# ============================================================================

# Создаем дополнительный маршрут для страницы "О приложении"
# "/about/" - URL-адрес этой страницы (http://127.0.0.1:5000/about/)
@app.route("/about/")
def about():
    # Функция about() обрабатывает запросы к странице /about/

    # Возвращаем HTML-страницу about.html из папки templates
    return render_template("about.html")


# ============================================================================
# БЛОК 5: ЗАПУСК ВЕБА-ПРИЛОЖЕНИЯ
# ============================================================================

# Проверяем, запущен ли файл напрямую (а не импортирован как модуль)
# __name__ == "__main__" будет True только если файл запущен напрямую
# Это защищает код от запуска при импорте в другие файлы
if __name__ == "__main__":
    # app.run() запускает встроенный веб-сервер Flask
    # debug=True включает режим отладки:
    #   - Автоматическая перезагрузка при изменении кода
    #   - Подробные сообщения об ошибках в браузере
    #   - Интерактивный отладчик в браузере
    # ВАЖНО: debug=True использовать только для разработки, не для продакшена!
    app.run(debug=True)

    # Сервер запустится по адресу: http://127.0.0.1:5000/
    # 127.0.0.1 - локальный адрес вашего компьютера (localhost)
    # 5000 - порт по умолчанию для Flask
    # Для остановки сервера нажмите Ctrl+C в терминале

# ============================================================================
# СТРУКТУРА ПРОЕКТА (создайте эти папки и файлы):
# ============================================================================
#
# project_folder/
# │
# ├── main.py                    # Этот файл (основной код приложения)
# │
# ├── templates/                 # Папка с HTML-шаблонами (ОБЯЗАТЕЛЬНА!)
# │   ├── datetime.html         # Главная страница с датой и временем
# │   └── about.html            # Страница "О приложении"
# │
# └── static/                    # Папка со статическими файлами (ОБЯЗАТЕЛЬНА!)
#     ├── css/                   # Папка с CSS-файлами
#     │   └── style.css         # Файл со стилями
#     │
#     └── image/                 # Папка с изображениями
#         └── clock.png         # Иконка часов (опционально)
#
# ============================================================================


# ============================================================================
# ИНСТРУКЦИЯ ПО ЗАПУСКУ:
# ============================================================================
#
# 1. Установите Flask (если еще не установлен):
#    - Откройте PyCharm
#    - Внизу слева нажмите на "Python Packages"
#    - Введите "flask" в поле поиска
#    - Нажмите "Install package"
#
# 2. Создайте структуру папок:
#    - Создайте папку "templates"
#    - Создайте папку "static"
#    - Внутри static создайте папки "css" и "image"
#
# 3. Создайте HTML-файлы (см. следующие комментарии)
#
# 4. Запустите приложение:
#    - Откройте файл main.py
#    - Нажмите правой кнопкой мыши
#    - Выберите "Run 'main'"
#
# 5. Откройте браузер:
#    - Перейдите по адресу http://127.0.0.1:5000/
#    - Вы увидите текущую дату и время
#
# ============================================================================


# ============================================================================
# ДОПОЛНИТЕЛЬНЫЕ ВОЗМОЖНОСТИ (можно добавить):
# ============================================================================
#
# 1. Обновление времени каждую секунду:
#    - Добавить JavaScript в HTML для автоматического обновления
#
# 2. Разные форматы времени:
#    - 12-часовой формат с AM/PM
#    - Время в разных часовых поясах
#
# 3. Календарь:
#    - Отображение полного календаря текущего месяца
#
# 4. Таймер обратного отсчета:
#    - До Нового года, дня рождения и т.д.
#
# ============================================================================